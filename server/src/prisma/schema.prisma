generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model News {
  id          Int         @id @default(autoincrement())
  title       String
  link        String      @unique
  description String
  image       String
  upvote      Int
  downvote    Int
  sourceId    Int
  createdAt   DateTime    @default(now())
  summary     String?
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  source      Source      @relation(fields: [sourceId], references: [id])
  savedNews   savedNews[]
  isHot       Boolean @default(false)

  Votes Votes[]

  actions UserNewsActions[]
}

model User {
  id                         Int            @id @default(autoincrement())
  name                       String
  lastname                   String
  email                      String         @unique
  password                   String
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  role                       Role           @default(USER)
  verificationToken          String?
  verificationTokenExpiresAt DateTime?
  isVerified                 Boolean?
  categories                 UserCategory[]
  savednews                  savedNews[]
  Votes Votes[]
  Preferences Preferences[]

  actions UserNewsActions[]
}

model Category {
  id           Int            @id @default(autoincrement())
  categoryName String         @unique
  news         News[]
  RssFeed      RssFeed[]
  UserCategory UserCategory[]
}

model UserCategory {
  id         Int      @id @default(autoincrement())
  userId     Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  user       User     @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@unique([userId, categoryId])
}

model savedNews {
  id     Int  @id @default(autoincrement())
  userId Int
  newsId Int
  news   News @relation(fields: [newsId], references: [id])
  user   User @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model Source {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  sourceImg String
  News      News[]
  RssFeed   RssFeed[]
}

model RssFeed {
  id         Int      @id @default(autoincrement())
  rssUrl     String   @unique
  categoryId Int
  sourceId   Int
  category   Category @relation(fields: [categoryId], references: [id])
  source     Source   @relation(fields: [sourceId], references: [id])
}
model Votes{
  id         Int     @id @default(autoincrement())
  userId     Int
  newsId     Int
  type      String
  createdAt  DateTime @default(now())
  news      News    @relation(fields: [newsId], references: [id])
  user       User    @relation(fields: [userId], references: [id],onDelete: Cascade)
}
model Preferences{
  id Int @id @default(autoincrement())
  userId Int
  language String?
  theme   String?
  showWelcomeMessagePopup Boolean @default(true)
  showVotePopup Boolean @default(true)
  user     User @relation(fields: [userId], references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}
model UserNewsActions{
  id         Int       @id @default(autoincrement())
  userId     Int
  newsId     Int
  actionType ActionType 
  createdAt  DateTime   @default(now())

  user       User       @relation(fields: [userId], references: [id],onDelete: Cascade)
  news       News       @relation(fields: [newsId], references: [id])
}
enum ActionType {
  UPVOTE
  DOWNVOTE
  SAVE
}

enum Role {
  USER
  ADMIN
}
